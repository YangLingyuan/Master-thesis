%\section{Implementation}
%\label{sec:implementation}
%In the section the implementation of the concept is shown. At first the linearization of the nonlinear model is explained. In the second subsection it is explained how the GPs are modelled and also which tool was used. In the third subsection the MPC framework is presented which was used to realize the concept of the work. Python 2.7 forms the basis for all those tools.
%
%\subsection{Linearization}
%\label{subsec:sysident}
%The nonlinear model is a function of the states $x$, the control variables $u$ and the disturbance variables $d$. Because the impact of the disturbance variables is crucial, the linear model
%\begin{equation}\label{eq:lin}
%f\left(x,u,d\right) \approx f\left(x_0,u_0,d\right) + \frac{\partial f \left(x,u,d\right)}{\partial x} \cdot \Delta x + \frac{\partial f\left(x,u,d\right)}{\partial u} \cdot \Delta u + w
%\end{equation}
%was derived which is still depending on the disturbances. $w$ is the error term which is estimated by the GPs.
%This also means deriving a finite impulse or finite step response model is very complex. Considering the a simplified version of the equation for the solar radiation 
%\begin{equation}\label{eq:simple_rs}
%Q_{rs} = D_{rs}\cdot\left(1-U_{shd}\right),
%\end{equation}
%where $D_{rs}$ is the solar radiation and $U_{shd}$ is the percentage of the solar radiation which is reflected by the shades. If the impulse/step test is done at night ($D_{rs} = \unit[0]{\nicefrac{W}{m^2}}$), it will suggest that the shades have no effect on the states and could therefore be dropped. However if doing the test at noon ($D_{rs} \approx \unit[800]{\nicefrac{W}{m^2}}$) one will assume that shades are the most important control input. If a linearization has to be done in that way, it will be convincing to use multiple models fitting to the values of the external variables.
%
%\subsection{Gaussian Processes}
%\label{subsec:gussianprocesses}
%%\begin{figure}[t]
%%\begin{center}
%%\includegraphics[width=\textwidth]{../Figures/}
%%\caption{Gaussian process model for the outside air temperature}
%%\label{fig:gptemperature}
%%\end{center}
%%\end{figure}
%For the predictions the measurement of the past 48 hours and predictions in four hour steps delivered by the weather forecast were used. Tests have shown that only using the measurements in 30 minutes steps deliver very good results.
%
%The GPs should govern the future development of the five disturbance variables. For every disturbance a separate GP is established. Therefore a complex covariance function consisting of four terms was chosen.
%The first term is
%\begin{equation}\label{eq:squaredexponential}
%k_1\left(x,x'\right)=\sigma_1^2 \exp{\left(-\frac{\left(x-x'\right)^2}{2l_1^2}\right)},
%\end{equation}
%where $\sigma_1^2$ gives the magnitude and $l_1^2$ is the characteristic length-scale.
%
%Because of the day-night-rhythm, a periodic component is implemented. Since the elongation and decrease of day-/night-hours and the fact that weather is a chaotic system, exact periodicity wouldn't make sense. Therefore the first subterm allows a decay. The hyperparameter $l_3^2$ is fixed to a length of 24 hours.
%\begin{equation}\label{eq:periodicwithdecay}
%k_2\left(x,x'\right)=\sigma_2^2 \exp{\left(-\frac{\left(x-x'\right)^2}{2l_2^2}-\frac{2\sin^2\left(\pi\left(x-x'\right)\right)}{l_3^2}\right)}
%\end{equation}
%
%Furthermore as the fourth term a linear kernel is added to cover weather trends
%\begin{equation}\label{eq:linearkernel}
%k_4\left(x,x'\right)=\sigma_1^2
%\end{equation}
%The overall covariance function is the sum of the kernels and is described by
%\begin{equation}\label{eq:overallkernel}
%k(x,x')=k_1(x,x')+k_2(x,x')+k_3(x,x')
%\end{equation}
%
%In the case of the solar radiation $D_{rs,e}$, because of the non-existance of negative solar radiation. This means for predictions $D_{rs,e}\leq0$ they are changed to $D_{rs,e}=0$.
%
%The training data was acquired by computing the nonlinear ODE and the linear ODE for the same value of the variables and then computing the difference
%\begin{equation}\label{eq:error}
%w = f_{nl}\left(x,u,d\right) - f_{lin}\left(x,u,d\right).
%\end{equation}
%The ODE of the system is depending on 11 variables. To avoid a mapping from 11 dimensions to 2. Variables which don't have an influence on a certain state were dropped. Also terms which only occur linearly were dropped because those are modelled perfectly by the linearization. Furthermore terms which are bilinear with one input and one disturbance variable can be dropped, because the linear model is still depending on the disturbance variables therefore modelling this terms correctly. Only nonlinear terms have to be estimated by the GPs to capture the nonlinear dynamics. This is here done for the two variables windspeed $D_{ws}$ and percentage of opening of the Vents $U_{ven}$ in the term of $V_{ven,flux}$ eq.~\ref{eq:venflux}. Fig.~\ref{fig:gp_ven_ws} shows the way the data was acquired. The both variables were split into 10 evenly spaced data points within their bounds. For all 100 combinations the difference \cref{eq:error} was computed using the kernel
%\begin{equation}\label{eq:kernel_ven_ws}
%\begin{split}
%k_{ven,ws} &= \sigma_{ven}^2 \exp{\left(-\frac{\left(U_{ven}-U_{ven}'\right)^2}{2l_{ven}^2}\right)}\\
%&+ \sigma_{ws}^2 \exp{\left(-\frac{\left(D_{ws}-D_{ws}'\right)^2}{2l_{ws}^2}\right)}\\
%&+ \sigma_{com}^2 \exp{\left(-\frac{\left(U_{ven}-D_{ws}\right)^2}{2l_{com}^2}\right)}
%\end{split}
%\end{equation} which is a the sum of a squared-exponential kernel for each variable and a two-dimensional one. The values of the parameters after their optimization can be taken from tab.~\ref{tab:param_gp}.
%fig.~\ref{fig:gp_ven_ws_no_opt} shows the same GP before the optimization. For the implementation of the GPs GPy \cite{Gpy.since2012} was used.
%
%\begin{figure}[!tbp]
	%\begin{subfigure}[b]{0.49\textwidth}
		%\includegraphics[width=\textwidth]{../Figures/ven_ws_not_opt.pdf}
		%\caption{Initial parameters}
		%\label{fig:gp_ven_ws_no_opt}
	%\end{subfigure}
	%\hfill
	%\begin{subfigure}[b]{0.49\textwidth}
		%\includegraphics[width=\textwidth]{../Figures/ven_ws.pdf}
		%\caption{Optimized parameters}
		%\label{fig:gp_ven_ws}
	%\end{subfigure}
%\caption{Gaussian process model for the error produced by the bilinear and nonlinear term $V_{ven,flux}$ \cref{eq:venflux}. The x-coordinate stands for the percentage of the opening of the vents, the y-coordinate for the windspeed in \unit[]{\nicefrac{m}{s}}}
%\end{figure}
%
%\begin{table*}
	%\centering
		%\begin{tabular}{|p{4.5cm}|p{4.5cm}|}\hline
		%parameter & value \\\hline
		%$\sigma_{ven}$ & $1.232 \cdot 10^{-15}$\\
		%$l_{ven}$ & $1.000$\\
		%$\sigma_{ws}$ & $3.374 \cdot 10^{-7}$\\
		%$l_{ws}$ & $84.430$\\
		%$\sigma_{com}$ & $ 0.1064$\\
		%$l_{com}$ & $149.2$\\\hline
		%\end{tabular}
		%\caption{Optimized parameters for the GP estimating the error produced through position of Vents}
		%\label{tab:param_gp}
%\end{table*}
%For further informations on GPs \cite{Rasmussen.2006} is a good choice.
%
%\subsection{do-mpc: a MPC framework}
%\label{subsec:dompc}
%do-mpc is an easy-to-use nonlinear MPC framework. It consists of the four modules model, optimizer, observer and simulator. The modular structure allows a fast and simple switch between different models for prediction as well as using different observers or optimizers which make analysis of different approaches very comfortable. For the symbolic computations Casadi is used, a tool for automatic differentiation \cite{Andersson.01.01.2013}. For solving the optimal control problems do-mpc uses Ipopt \cite{Wachter.2006}, a software package using 2nd order derivatives.
%For further information on do-mpc see \cite{Lucia.2017}.
%
%
%\section{Performance}
%\label{sec:performance}
%In this section the performances of the three approaches are compared. The nonlinear MPC is used as our benchmark. Then the performance of the linear MPC with and without MPGs is compared. In the first subsection their ability to hold a set-point is discussed. In the second section the aim is to minimize the energy and water consumption. For both tests the same bounds were used. Also soft constraints were implemented to guarantee the functionality of the MPC if the bounds are violated minimally. In both cases the same weatherdata was used, depicted in \cref{fig:disturbances}.
%
%\begin{figure}[t]
%\begin{center}
%\includegraphics[width=\textwidth]{../Figures/disturbances.eps}
%\caption{24h sample of the disturbance variables}
%\label{fig:disturbances}
%\end{center}
%\end{figure}
%
%
%\subsection{Set-point control}
%\label{subsec:setpoint}
%The objective function
%\begin{equation}\label{eq:obj_sp}
%J = 1 \cdot 10^2 \left(25.0-X_{T_{a,a}\right)^2 + 1 \cdot 10^2 \left(0.015-X_{H_{a,a}\right)^2
%\end{equation}
%forces the system to hold the set-point which are the optimal conditions for tomato crop growth. 
%
%\subsection{Energy and water comsumption}
%\label{subsec:energyandwater}
%To minimize the energy and water consumption 
%\begin{equation}\label{eq:obj_sp}
%J = 1 \cdot 10^2 \left{25.0-X_{T_{a,a}}\right)^2 + 1 \cdot 10^2 \left{0.015-X_{H_{a,a}}\right)^2
%\end{equation} 